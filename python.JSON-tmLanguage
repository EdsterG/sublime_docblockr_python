// [PackageDev] target_format: plist, ext: tmLanguage
{
    "name": "Python Extended",
    "scopeName": "source.python",
    "fileTypes": [
        "py",
        "rpy",
        "pyw",
        "cpy",
        "SConstruct",
        "Sconstruct",
        "sconstruct",
        "SConscript"
    ],
    "uuid": "cc9da721-b458-4880-a430-38fd2e305bb1",
    "keyEquivalent": "^~P",
    
    "foldingStartMarker": "^\\s*(def|class)\\s+([.a-zA-Z0-9_ <]+)\\s*(\\((.*)\\))?\\s*:|\\{\\s*$|\\(\\s*$|\\[\\s*$|^\\s*\"\"\"(?=.)(?!.*\"\"\")",
    "foldingStopMarker": "^\\s*$|^\\s*\\}|^\\s*\\]|^\\s*\\)|^\\s*\"\"\"\\s*$",

    "patterns": [
        {
            "match": "(#).*$\\n?",
            "name": "comment.line.number-sign.python",
            "captures": {
                "1": {
                    "name": "punctuation.definition.comment.python"
                }
            }
        },
        {
            "match": "\\b(?i:(0x\\h*)L)",
            "name": "constant.numeric.integer.long.hexadecimal.python"
        },
        {
            "match": "\\b(?i:(0x\\h*))",
            "name": "constant.numeric.integer.hexadecimal.python"
        },
        {
            "match": "\\b(?i:(0[0-7]+)L)",
            "name": "constant.numeric.integer.long.octal.python"
        },
        {
            "match": "\\b(0[0-7]+)",
            "name": "constant.numeric.integer.octal.python"
        },
        {
            "match": "\\b(?i:(((\\d+(\\.(?=[^a-zA-Z_])\\d*)?|(?<=[^0-9a-zA-Z_])\\.\\d+)(e[\\-\\+]?\\d+)?))J)",
            "name": "constant.numeric.complex.python"
        },
        {
            "match": "\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))(?=[^a-zA-Z_])",
            "name": "constant.numeric.float.python"
        },
        {
            "match": "(?<=[^0-9a-zA-Z_])(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))",
            "name": "constant.numeric.float.python"
        },
        {
            "match": "\\b(?i:(\\d+e[\\-\\+]?\\d+))",
            "name": "constant.numeric.float.python"
        },
        {
            "match": "\\b(?i:([1-9]+[0-9]*|0)L)",
            "name": "constant.numeric.integer.long.decimal.python"
        },
        {
            "match": "\\b([1-9]+[0-9]*|0)",
            "name": "constant.numeric.integer.decimal.python"
        },
        {
            "match": "\\b(global)\\b",
            "captures": {
                "1": {
                    "name": "storage.modifier.global.python"
                }
            }
        },
        {
            "match": "\\b(nonlocal)\\b",
            "captures": {
                "1": {
                    "name": "storage.modifier.nonlocal.python"
                }
            }
        },
        {
            "match": "\\b(?:(import)|(from))\\b",
            "captures": {
                "1": {
                    "name": "keyword.control.import.python"
                },
                "2": {
                    "name": "keyword.control.import.from.python"
                }
            }
        },
        {
            "comment": "keywords that delimit flow blocks or alter flow from within a block",
            "match": "\\b(elif|else|except|finally|for|if|try|while|with|break|continue|pass|raise|return|yield)\\b",
            "name": "keyword.control.flow.python"
        },
        {
            "comment": "keyword operators that evaluate to True or False",
            "match": "\\b(and|in|is|not|or)\\b",
            "name": "keyword.operator.logical.python"
        },
        {
            "comment": "keywords that haven't fit into other groups (yet).",
            "match": "\\b(as|assert|del|exec|print)\\b",
            "captures": {
                "1": {
                    "name": "keyword.other.python"
                }
            }
        },
        {
            "match": "<>",
            "name": "invalid.deprecated.operator.python"
        },
        {
            "match": "<\\=|>\\=|\\=\\=|<|>|\\!\\=",
            "name": "keyword.operator.comparison.python"
        },
        {
            "match": "\\+\\=|-\\=|\\*\\=|/\\=|//\\=|%\\=|&\\=|\\|\\=|\\^\\=|>>\\=|<<\\=|\\*\\*\\=",
            "name": "keyword.operator.assignment.augmented.python"
        },
        {
            "match": "\\+|\\-|\\*|\\*\\*|/|//|%|<<|>>|&|\\||\\^|~",
            "name": "keyword.operator.arithmetic.python"
        },
        {
            "match": "\\=",
            "name": "keyword.operator.assignment.python"
        },
        {
            "end": "\\s*(:)",
            "begin": "^\\s*(class)\\s+(?=[a-zA-Z_][a-zA-Z_0-9]*\\s*\\:)",
            "patterns": [
                {
                    "include": "#entity_name_class"
                }
            ],
            "contentName": "entity.name.type.class.python",
            "name": "meta.class.old-style.python",
            "endCaptures": {
                "1": {
                    "name": "punctuation.section.class.begin.python"
                }
            },
            "beginCaptures": {
                "1": {
                    "name": "storage.type.class.python"
                }
            }
        },
        {
            "end": "(\\))\\s*(?:(\\:)|(.*$\\n?))",
            "begin": "^\\s*(class)\\s+(?=[a-zA-Z_][a-zA-Z_0-9]*\\s*\\()",
            "patterns": [
                {
                    "end": "(?![A-Za-z0-9_])",
                    "begin": "(?=[A-Za-z_][A-Za-z0-9_]*)",
                    "contentName": "entity.name.type.class.python",
                    "patterns": [
                        {
                            "include": "#entity_name_class"
                        }
                    ]
                },
                {
                    "end": "(?=\\)|:)",
                    "begin": "(\\()",
                    "patterns": [
                        {
                            "end": "\\s*(?:(,)|(?=\\)))",
                            "begin": "(?<=\\(|,)\\s*",
                            "patterns": [
                                {
                                    "include": "$self"
                                }
                            ],
                            "contentName": "entity.other.inherited-class.python",
                            "endCaptures": {
                                "1": {
                                    "name": "punctuation.separator.inheritance.python"
                                }
                            }
                        }
                    ],
                    "contentName": "meta.class.inheritance.python",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.inheritance.begin.python"
                        }
                    }
                }
            ],
            "name": "meta.class.python",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.inheritance.end.python"
                },
                "3": {
                    "name": "invalid.illegal.missing-section-begin.python"
                },
                "2": {
                    "name": "punctuation.section.class.begin.python"
                }
            },
            "beginCaptures": {
                "1": {
                    "name": "storage.type.class.python"
                }
            }
        },
        {
            "end": "(\\()|\\s*($\\n?|#.*$\\n?)",
            "begin": "^\\s*(class)\\s+(?=[a-zA-Z_][a-zA-Z_0-9])",
            "patterns": [
                {
                    "end": "(?![A-Za-z0-9_])",
                    "begin": "(?=[A-Za-z_][A-Za-z0-9_]*)",
                    "contentName": "entity.name.type.class.python",
                    "patterns": [
                        {
                            "include": "#entity_name_function"
                        }
                    ]
                }
            ],
            "name": "meta.class.python",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.inheritance.begin.python"
                },
                "2": {
                    "name": "invalid.illegal.missing-inheritance.python"
                }
            },
            "beginCaptures": {
                "1": {
                    "name": "storage.type.class.python"
                }
            }
        },
        {
            "end": "(\\))\\s*(?:(\\:)|(.*$\\n?))",
            "begin": "^\\s*(def)\\s+(?=[A-Za-z_][A-Za-z0-9_]*\\s*\\()",
            "patterns": [
                {
                    "end": "(?![A-Za-z0-9_])",
                    "begin": "(?=[A-Za-z_][A-Za-z0-9_]*)",
                    "contentName": "entity.name.function.python",
                    "patterns": [
                        {
                            "include": "#entity_name_function"
                        }
                    ]
                },
                {
                    "end": "(?=\\)\\s*\\:)",
                    "begin": "(\\()",
                    "patterns": [
                        {
                            "include": "#keyword_arguments"
                        },
                        {
                            "match": "\\b([a-zA-Z_][a-zA-Z_0-9]*)\\s*(?:(,)|(?=[\\n\\)]))",
                            "captures": {
                                "1": {
                                    "name": "variable.parameter.function.python"
                                },
                                "2": {
                                    "name": "punctuation.separator.parameters.python"
                                }
                            }
                        }
                    ],
                    "contentName": "meta.function.parameters.python",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.parameters.begin.python"
                        }
                    }
                }
            ],
            "name": "meta.function.python",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.parameters.end.python"
                },
                "3": {
                    "name": "invalid.illegal.missing-section-begin.python"
                },
                "2": {
                    "name": "punctuation.section.function.begin.python"
                }
            },
            "beginCaptures": {
                "1": {
                    "name": "storage.type.function.python"
                }
            }
        },
        {
            "end": "(\\()|\\s*($\\n?|#.*$\\n?)",
            "begin": "^\\s*(def)\\s+(?=[A-Za-z_][A-Za-z0-9_]*)",
            "patterns": [
                {
                    "end": "(?![A-Za-z0-9_])",
                    "begin": "(?=[A-Za-z_][A-Za-z0-9_]*)",
                    "contentName": "entity.name.function.python",
                    "patterns": [
                        {
                            "include": "#entity_name_function"
                        }
                    ]
                }
            ],
            "name": "meta.function.python",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.parameters.begin.python"
                },
                "2": {
                    "name": "invalid.illegal.missing-parameters.python"
                }
            },
            "beginCaptures": {
                "1": {
                    "name": "storage.type.function.python"
                }
            }
        },
        {
            "end": "(\\:)",
            "begin": "(lambda)(?=\\s+)",
            "patterns": [
                {
                    "end": "(?=\\:)",
                    "begin": "\\s+",
                    "contentName": "meta.function.inline.parameters.python",
                    "patterns": [
                        {
                            "include": "#keyword_arguments"
                        },
                        {
                            "match": "\\b([a-zA-Z_][a-zA-Z_0-9]*)\\s*(?:(,)|(?=[\\n\\)\\:]))",
                            "captures": {
                                "1": {
                                    "name": "variable.parameter.function.python"
                                },
                                "2": {
                                    "name": "punctuation.separator.parameters.python"
                                }
                            }
                        }
                    ]
                }
            ],
            "name": "meta.function.inline.python",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.parameters.end.python"
                },
                "3": {
                    "name": "invalid.illegal.missing-section-begin.python"
                },
                "2": {
                    "name": "punctuation.section.function.begin.python"
                }
            },
            "beginCaptures": {
                "1": {
                    "name": "storage.type.function.inline.python"
                }
            }
        },
        {
            "comment": "a decorator may be a function call which returns a decorator.",
            "end": "(\\))",
            "begin": "^\\s*(?=@\\s*[A-Za-z_][A-Za-z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*\\s*\\()",
            "name": "meta.function.decorator.python",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.arguments.end.python"
                }
            },
            "patterns": [
                {
                    "end": "(?=\\s*\\()",
                    "begin": "(?=(@)\\s*[A-Za-z_][A-Za-z0-9_]*(?:\\.[A-Za-z_][A-Za-z0-9_]*)*\\s*\\()",
                    "patterns": [
                        {
                            "include": "#dotted_name"
                        }
                    ],
                    "contentName": "entity.name.function.decorator.python",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.decorator.python"
                        }
                    }
                },
                {
                    "end": "(?=\\))",
                    "begin": "(\\()",
                    "patterns": [
                        {
                            "include": "#keyword_arguments"
                        },
                        {
                            "include": "$self"
                        }
                    ],
                    "contentName": "meta.function.decorator.arguments.python",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.arguments.begin.python"
                        }
                    }
                }
            ]
        },
        {
            "end": "(?=\\s|$\\n?|#)",
            "begin": "^\\s*(?=@\\s*[A-Za-z_][A-Za-z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*)",
            "name": "meta.function.decorator.python",
            "contentName": "entity.name.function.decorator.python",
            "patterns": [
                {
                    "end": "(?=\\s|$\\n?|#)",
                    "begin": "(?=(@)\\s*[A-Za-z_][A-Za-z0-9_]*(\\.[A-Za-z_][A-Za-z0-9_]*)*)",
                    "patterns": [
                        {
                            "include": "#dotted_name"
                        }
                    ],
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.decorator.python"
                        }
                    }
                }
            ]
        },
        {
            "end": "(\\))",
            "begin": "(?<=\\)|\\])\\s*(\\()",
            "patterns": [
                {
                    "include": "#keyword_arguments"
                },
                {
                    "include": "$self"
                }
            ],
            "contentName": "meta.function-call.arguments.python",
            "name": "meta.function-call.python",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.arguments.end.python"
                }
            },
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.arguments.begin.python"
                }
            }
        },
        {
            "end": "(\\))",
            "begin": "(?=[A-Za-z_][A-Za-z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*\\s*\\()",
            "name": "meta.function-call.python",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.arguments.end.python"
                }
            },
            "patterns": [
                {
                    "end": "(?=\\s*\\()",
                    "begin": "(?=[A-Za-z_][A-Za-z0-9_]*(?:\\.[A-Za-z_][A-Za-z0-9_]*)*\\s*\\()",
                    "patterns": [
                        {
                            "include": "#dotted_name"
                        }
                    ]
                },
                {
                    "end": "(?=\\))",
                    "begin": "(\\()",
                    "patterns": [
                        {
                            "include": "#keyword_arguments"
                        },
                        {
                            "include": "$self"
                        }
                    ],
                    "contentName": "meta.function-call.arguments.python",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.arguments.begin.python"
                        }
                    }
                }
            ]
        },
        {
            "end": "(\\])",
            "begin": "(?=[A-Za-z_][A-Za-z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*\\s*\\[)",
            "name": "meta.item-access.python",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.arguments.end.python"
                }
            },
            "patterns": [
                {
                    "end": "(?=\\s*\\[)",
                    "begin": "(?=[A-Za-z_][A-Za-z0-9_]*(?:\\.[A-Za-z_][A-Za-z0-9_]*)*\\s*\\[)",
                    "patterns": [
                        {
                            "include": "#dotted_name"
                        }
                    ]
                },
                {
                    "end": "(?=\\])",
                    "begin": "(\\[)",
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ],
                    "contentName": "meta.item-access.arguments.python",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.arguments.begin.python"
                        }
                    }
                }
            ]
        },
        {
            "end": "(\\])",
            "begin": "(?<=\\)|\\])\\s*(\\[)",
            "patterns": [
                {
                    "include": "$self"
                }
            ],
            "contentName": "meta.item-access.arguments.python",
            "name": "meta.item-access.python",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.arguments.end.python"
                }
            },
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.arguments.begin.python"
                }
            }
        },
        {
            "match": "\\b(def|lambda)\\b",
            "captures": {
                "1": {
                    "name": "storage.type.function.python"
                }
            }
        },
        {
            "match": "\\b(class)\\b",
            "captures": {
                "1": {
                    "name": "storage.type.class.python"
                }
            }
        },
        {
            "include": "#line_continuation"
        },
        {
            "include": "#language_variables"
        },
        {
            "match": "\\b(None|True|False|Ellipsis|NotImplemented)\\b",
            "name": "constant.language.python"
        },
        {
            "include": "#string_quoted_single"
        },
        {
            "include": "#string_quoted_double"
        },
        {
            "include": "#dotted_name"
        },
        {
            "end": "(\\))",
            "begin": "(\\()",
            "patterns": [
                {
                    "include": "$self"
                }
            ]
        },
        {
            "match": "(\\[)(\\s*(\\]))\\b",
            "captures": {
                "1": {
                    "name": "punctuation.definition.list.begin.python"
                },
                "3": {
                    "name": "punctuation.definition.list.end.python"
                },
                "2": {
                    "name": "meta.empty-list.python"
                }
            }
        },
        {
            "end": "(\\])",
            "begin": "(\\[)",
            "patterns": [
                {
                    "end": "\\s*(?:(,)|(?=\\]))",
                    "begin": "(?<=\\[|\\,)\\s*(?![\\],])",
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ],
                    "contentName": "meta.structure.list.item.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.separator.list.python"
                        }
                    }
                }
            ],
            "name": "meta.structure.list.python",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.list.end.python"
                }
            },
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.list.begin.python"
                }
            }
        },
        {
            "match": "(\\()(\\s*(\\)))",
            "name": "meta.structure.tuple.python",
            "captures": {
                "1": {
                    "name": "punctuation.definition.tuple.begin.python"
                },
                "3": {
                    "name": "punctuation.definition.tuple.end.python"
                },
                "2": {
                    "name": "meta.empty-tuple.python"
                }
            }
        },
        {
            "match": "(\\{)(\\s*(\\}))",
            "name": "meta.structure.dictionary.python",
            "captures": {
                "1": {
                    "name": "punctuation.definition.dictionary.begin.python"
                },
                "3": {
                    "name": "punctuation.definition.dictionary.end.python"
                },
                "2": {
                    "name": "meta.empty-dictionary.python"
                }
            }
        },
        {
            "end": "(\\})",
            "begin": "(\\{)",
            "patterns": [
                {
                    "end": "\\s*(?:(?=\\})|(\\:))",
                    "begin": "(?<=\\{|\\,|^)\\s*(?![\\},])",
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ],
                    "contentName": "meta.structure.dictionary.key.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.separator.valuepair.dictionary.python"
                        }
                    }
                },
                {
                    "end": "\\s*(?:(?=\\})|(,))",
                    "begin": "(?<=\\:|^)\\s*",
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ],
                    "contentName": "meta.structure.dictionary.value.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.separator.dictionary.python"
                        }
                    }
                }
            ],
            "name": "meta.structure.dictionary.python",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.dictionary.end.python"
                }
            },
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.dictionary.begin.python"
                }
            }
        }
    ],
    "repository": {
        "constant_placeholder": {
            "match": "(?i:%(\\([a-z_]+\\))?#?0?\\-?[ ]?\\+?([0-9]*|\\*)(\\.([0-9]*|\\*))?[hL]?[a-z%])",
            "name": "constant.other.placeholder.python"
        },
        "escaped_char": {
            "match": "(\\\\x[0-9A-F]{2})|(\\\\[0-7]{3})|(\\\\\\n)|(\\\\\\\\)|(\\\\\\\")|(\\\\')|(\\\\a)|(\\\\b)|(\\\\f)|(\\\\n)|(\\\\r)|(\\\\t)|(\\\\v)",
            "captures": {
                "13": {
                    "name": "constant.character.escape.vertical-tab.python"
                },
                "12": {
                    "name": "constant.character.escape.tab.python"
                },
                "11": {
                    "name": "constant.character.escape.return.python"
                },
                "10": {
                    "name": "constant.character.escape.linefeed.python"
                },
                "9": {
                    "name": "constant.character.escape.formfeed.python"
                },
                "8": {
                    "name": "constant.character.escape.backspace.python"
                },
                "1": {
                    "name": "constant.character.escape.hex.python"
                },
                "3": {
                    "name": "constant.character.escape.newline.python"
                },
                "2": {
                    "name": "constant.character.escape.octal.python"
                },
                "5": {
                    "name": "constant.character.escape.double-quote.python"
                },
                "4": {
                    "name": "constant.character.escape.backlash.python"
                },
                "7": {
                    "name": "constant.character.escape.bell.python"
                },
                "6": {
                    "name": "constant.character.escape.single-quote.python"
                }
            }
        },
        "builtin_types": {
            "match": "(?x)\\b(\n\t\t\t\tbasestring|bool|buffer|classmethod|complex|dict|enumerate|file|\n\t\t\t\tfloat|frozenset|int|list|long|object|open|property|reversed|set|\n\t\t\t\tslice|staticmethod|str|super|tuple|type|unicode|xrange\n\t\t\t)\\b",
            "name": "support.type.python"
        },
        "regular_expressions": {
            "comment": "Changed disabled to 1 to turn off syntax highlighting in \u201cr\u201d strings.",
            "disabled": 0,
            "patterns": [
                {
                    "include": "source.regexp.python"
                }
            ]
        },
        "magic_variable_names": {
            "comment": "magic variables which a class/module may have.",
            "match": "\\b__(all|bases|class|debug|dict|doc|file|members|metaclass|methods|name|slots|weakref)__\\b",
            "name": "support.variable.magic.python"
        },
        "docstrings": {
            "patterns": [
                {
                    "begin": "^\\s*(?=[uU]?[rR]?\"\"\")",
                    "end": "(?<=\"\"\")",
                    "name": "comment.block.python",
                    "patterns": [
                        {
                            "include": "#string_quoted_double"
                        }
                    ]
                },
                {
                    "begin": "^\\s*(?=[uU]?[rR]?''')",
                    "end": "(?<=''')",
                    "name": "comment.block.python",
                    "patterns": [
                        {
                            "include": "#string_quoted_single"
                        }
                    ]
                }
            ]
        },
        "keyword_arguments": {
            "end": "\\s*(?:(,)|(?=$\\n?|[\\)\\:]))",
            "begin": "\\b([a-zA-Z_][a-zA-Z_0-9]*)\\s*(=)(?!=)",
            "patterns": [
                {
                    "include": "$self"
                }
            ],
            "endCaptures": {
                "1": {
                    "name": "punctuation.separator.parameters.python"
                }
            },
            "beginCaptures": {
                "1": {
                    "name": "variable.parameter.function.python"
                },
                "2": {
                    "name": "keyword.operator.assignment.python"
                }
            }
        },
        "magic_function_names": {
            "comment": "these methods have magic interpretation by python and are generally called indirectly through syntactic constructs",
            "match": "(?x)\\b(__(?:\n\t\t\t\t\t\tabs|add|and|call|cmp|coerce|complex|contains|del|delattr|\n\t\t\t\t\t\tdelete|delitem|delslice|div|divmod|enter|eq|exit|float|\n\t\t\t\t\t\tfloordiv|ge|get|getattr|getattribute|getitem|getslice|gt|\n\t\t\t\t\t\thash|hex|iadd|iand|idiv|ifloordiv|ilshift|imod|imul|init|\n\t\t\t\t\t\tint|invert|ior|ipow|irshift|isub|iter|itruediv|ixor|le|len|\n\t\t\t\t\t\tlong|lshift|lt|mod|mul|ne|neg|new|nonzero|oct|or|pos|pow|\n\t\t\t\t\t\tradd|rand|rdiv|rdivmod|repr|rfloordiv|rlshift|rmod|rmul|ror|\n\t\t\t\t\t\trpow|rrshift|rshift|rsub|rtruediv|rxor|set|setattr|setitem|\n\t\t\t\t\t\tsetslice|str|sub|truediv|unicode|xor\n\t\t\t\t\t)__)\\b",
            "name": "support.function.magic.python"
        },
        "line_continuation": {
            "match": "(\\\\)(.*)$\\n?",
            "captures": {
                "1": {
                    "name": "punctuation.separator.continuation.line.python"
                },
                "2": {
                    "name": "invalid.illegal.unexpected-text.python"
                }
            }
        },
        "language_variables": {
            "match": "\\b(self|cls)\\b",
            "name": "variable.language.python"
        },
        "string_quoted_double": {
            "patterns": [
                {
                    "comment": "single quoted unicode-raw string",
                    "end": "((?<=\"\"\")(\")\"\"|\"\"\")",
                    "begin": "([uU]r)(\"\"\")",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_unicode_char"
                        },
                        {
                            "include": "#escaped_char"
                        },
                        {
                            "include": "#regular_expressions"
                        }
                    ],
                    "name": "string.quoted.double.block.unicode-raw-regex.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "meta.empty-string.double.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "single quoted unicode-raw string without regular expression highlighting",
                    "end": "((?<=\"\"\")(\")\"\"|\"\"\")",
                    "begin": "([uU]R)(\"\"\")",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_unicode_char"
                        },
                        {
                            "include": "#escaped_char"
                        }
                    ],
                    "name": "string.quoted.double.block.unicode-raw.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "meta.empty-string.double.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "double quoted raw string",
                    "end": "((?<=\"\"\")(\")\"\"|\"\"\")",
                    "begin": "(r)(\"\"\")",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_char"
                        },
                        {
                            "include": "#regular_expressions"
                        }
                    ],
                    "name": "string.quoted.double.block.raw-regex.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "meta.empty-string.double.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "double quoted raw string",
                    "end": "((?<=\"\"\")(\")\"\"|\"\"\")",
                    "begin": "(R)(\"\"\")",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_char"
                        }
                    ],
                    "name": "string.quoted.double.block.raw.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "meta.empty-string.double.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "double quoted unicode string",
                    "end": "((?<=\"\"\")(\")\"\"|\"\"\")",
                    "begin": "([uU])(\"\"\")",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_unicode_char"
                        },
                        {
                            "include": "#escaped_char"
                        }
                    ],
                    "name": "string.quoted.double.block.unicode.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "meta.empty-string.double.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "double-quoted raw string",
                    "end": "((?<=\")(\")|\")|(\\n)",
                    "begin": "([uU]r)(\")",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_unicode_char"
                        },
                        {
                            "include": "#escaped_char"
                        },
                        {
                            "include": "#regular_expressions"
                        }
                    ],
                    "name": "string.quoted.double.single-line.unicode-raw-regex.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "3": {
                            "name": "invalid.illegal.unclosed-string.python"
                        },
                        "2": {
                            "name": "meta.empty-string.double.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "double-quoted raw string",
                    "end": "((?<=\")(\")|\")|(\\n)",
                    "begin": "([uU]R)(\")",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_unicode_char"
                        },
                        {
                            "include": "#escaped_char"
                        }
                    ],
                    "name": "string.quoted.double.single-line.unicode-raw.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "3": {
                            "name": "invalid.illegal.unclosed-string.python"
                        },
                        "2": {
                            "name": "meta.empty-string.double.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "double-quoted raw string",
                    "end": "((?<=\")(\")|\")|(\\n)",
                    "begin": "(r)(\")",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_char"
                        },
                        {
                            "include": "#regular_expressions"
                        }
                    ],
                    "name": "string.quoted.double.single-line.raw-regex.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "3": {
                            "name": "invalid.illegal.unclosed-string.python"
                        },
                        "2": {
                            "name": "meta.empty-string.double.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "double-quoted raw string",
                    "end": "((?<=\")(\")|\")|(\\n)",
                    "begin": "(R)(\")",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_char"
                        }
                    ],
                    "name": "string.quoted.double.single-line.raw.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "3": {
                            "name": "invalid.illegal.unclosed-string.python"
                        },
                        "2": {
                            "name": "meta.empty-string.double.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "double quoted unicode string",
                    "end": "((?<=\")(\")|\")|(\\n)",
                    "begin": "([uU])(\")",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_unicode_char"
                        },
                        {
                            "include": "#escaped_char"
                        }
                    ],
                    "name": "string.quoted.double.single-line.unicode.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "3": {
                            "name": "invalid.illegal.unclosed-string.python"
                        },
                        "2": {
                            "name": "meta.empty-string.double.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "double quoted string",
                    "end": "((?<=\"\"\")(\")\"\"|\"\"\")",
                    "begin": "(\"\"\")(?=\\s*(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER))",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_char"
                        },
                        {
                            "include": "source.sql"
                        }
                    ],
                    "name": "string.quoted.double.block.sql.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "meta.empty-string.double.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "double quoted string",
                    "end": "((?<=\")(\")|\")|(\\n)",
                    "begin": "(\")(?=\\s*(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER))",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_char"
                        },
                        {
                            "include": "source.sql"
                        }
                    ],
                    "name": "string.quoted.double.single-line.sql.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "3": {
                            "name": "invalid.illegal.unclosed-string.python"
                        },
                        "2": {
                            "name": "meta.empty-string.double.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "double quoted string",
                    "end": "((?<=\"\"\")(\")\"\"|\"\"\")",
                    "begin": "(\"\"\")",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_char"
                        },
                        {
                            "begin": "^\\s*([Kk]eyword )?([Aa]rguments)(:)?\\s*$",
                            "beginCaptures": {
                                "0": { "name": "variable.parameter.function.python" }
                            },
                            "end": "(^\\s*$|\\s*(?=\"\"\"))",
                            "patterns": [
                                {
                                    "match": "^\\s*(\\w*)\\s*\\{([^\\{\\}]*)\\}\\s*--\\s*(.*)$",
                                    "captures": {
                                        "1": { "name": "variable.parameter.function.python" },
                                        "2": { "name": "support.type.python"},
                                        "3": { "name": "string.quoted.double.block.python"}
                                    }
                                }
                            ]
                        },
                        {
                            "begin": "^\\s*([Vv]ariables)(:)?\\s*$",
                            "beginCaptures": {
                                "0": { "name": "constant.numeric.integer.decimal.python" }
                            },
                            "end": "(^\\s*$|\\s*(?=\"\"\"))",
                            "patterns": [
                                {
                                    "match": "^\\s*(\\w*)\\s*\\{([^\\{\\}]*)\\}(\\s*--)?\\s*(.*)?$",
                                    "captures": {
                                        "1": { "name": "variable.parameter.function.python" },
                                        "2": { "name": "support.type.python"},
                                        "3": { "name": "string.quoted.double.block.python"}
                                    }
                                }
                            ]
                        },
                        {
                            "begin": "^\\s*([Ee]xamples)(:)?\\s*$",
                            "beginCaptures": {
                                "0": { "name": "support.function.magic.python" }
                            },
                            "end": "(^\\s*$|\\s*(?=\"\"\"))"
                        },
                        {
                            "begin": "^\\s*([Ee]xtends|[Dd]ecorators)(:)?\\s*$",
                            "beginCaptures": {
                                "0": { "name": "entity.name.function.decorator.python" }
                            },
                            "end": "(^\\s*$|\\s*(?=\"\"\"))",
                            "patterns": [
                                {
                                    "match": "^(.*)$",
                                    "captures": {
                                        "1": { "name": "entity.name.function.decorator.python" }
                                    }
                                }
                            ]
                        },
                        {
                            "begin": "^\\s*([Rr]eturns|[Yy]ields|[Rr]aises)(:)?\\s*$",
                            "beginCaptures": {
                                "0": { "name": "keyword.other.python" }
                            },
                            "end": "(^\\s*$|\\s*(?=\"\"\"))",
                            "patterns": [
                                {
                                    "match": "^\\s*\\{([^\\{\\}]*)\\}",
                                    "captures": {
                                        "1": { "name": "support.type.python" }
                                    }
                                }
                            ]
                        }
                    ],
                    "name": "string.quoted.double.block.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "meta.empty-string.double.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "double quoted string",
                    "end": "((?<=\")(\")|\")|(\\n)",
                    "begin": "(\")",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_char"
                        }
                    ],
                    "name": "string.quoted.double.single-line.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "3": {
                            "name": "invalid.illegal.unclosed-string.python"
                        },
                        "2": {
                            "name": "meta.empty-string.double.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                }
            ]
        },
        "escaped_unicode_char": {
            "match": "(\\\\U[0-9A-Fa-f]{8})|(\\\\u[0-9A-Fa-f]{4})|(\\\\N\\{[a-zA-Z ]+\\})",
            "captures": {
                "1": {
                    "name": "constant.character.escape.unicode.16-bit-hex.python"
                },
                "3": {
                    "name": "constant.character.escape.unicode.name.python"
                },
                "2": {
                    "name": "constant.character.escape.unicode.32-bit-hex.python"
                }
            }
        },
        "builtin_exceptions": {
            "match": "(?x)\\b(\n                (\n                    Arithmetic|Assertion|Attribute|Buffer|EOF|Environment|FloatingPoint|IO|\n                    Import|Indentation|Index|Key|Lookup|Memory|Name|NotImplemented|OS|Overflow|\n                    Reference|Runtime|Standard|Syntax|System|Tab|Type|UnboundLocal|\n                    Unicode(Encode|Decode|Translate)?|\n                    Value|VMS|Windows|ZeroDivision\n                )Error|\n                ((Pending)?Deprecation|Runtime|Syntax|User|Future|Import|Unicode|Bytes)?Warning|\n                (Base)?Exception|\n                SystemExit|StopIteration|NotImplemented|KeyboardInterrupt|GeneratorExit\n\t\t\t)\\b",
            "name": "support.type.exception.python"
        },
        "function_name": {
            "patterns": [
                {
                    "include": "#magic_function_names"
                },
                {
                    "include": "#magic_variable_names"
                },
                {
                    "include": "#builtin_exceptions"
                },
                {
                    "include": "#builtin_functions"
                },
                {
                    "include": "#builtin_types"
                },
                {
                    "include": "#generic_names"
                }
            ]
        },
        "entity_name_function": {
            "patterns": [
                {
                    "include": "#magic_function_names"
                },
                {
                    "include": "#illegal_names"
                },
                {
                    "include": "#generic_names"
                }
            ]
        },
        "dotted_name": {
            "end": "(?![A-Za-z0-9_\\.])",
            "begin": "(?=[A-Za-z_][A-Za-z0-9_]*(?:\\.[A-Za-z_][A-Za-z0-9_]*)*)",
            "patterns": [
                {
                    "end": "(?![A-Za-z0-9_])",
                    "begin": "(\\.)(?=[A-Za-z_][A-Za-z0-9_]*)",
                    "patterns": [
                        {
                            "include": "#magic_function_names"
                        },
                        {
                            "include": "#magic_variable_names"
                        },
                        {
                            "include": "#illegal_names"
                        },
                        {
                            "include": "#generic_names"
                        }
                    ]
                },
                {
                    "end": "(?![A-Za-z0-9_])",
                    "begin": "(?<!\\.)(?=[A-Za-z_][A-Za-z0-9_]*)",
                    "patterns": [
                        {
                            "include": "#builtin_functions"
                        },
                        {
                            "include": "#builtin_types"
                        },
                        {
                            "include": "#builtin_exceptions"
                        },
                        {
                            "include": "#illegal_names"
                        },
                        {
                            "include": "#magic_function_names"
                        },
                        {
                            "include": "#magic_variable_names"
                        },
                        {
                            "include": "#language_variables"
                        },
                        {
                            "include": "#generic_names"
                        }
                    ]
                }
            ]
        },
        "builtin_functions": {
            "match": "(?x)\\b(\n              __import__|abs|all|any|apply|ascii|bin|bytearray|bytes|callable|chr|cmp|coerce|compile|delattr|dir|\n                divmod|eval|execfile|filter|format|getattr|globals|hasattr|hash|help|hex|id|\n                input|intern|isinstance|issubclass|iter|len|locals|map|max|memoryview|min|next|oct|\n                ord|pow|range|raw_input|reduce|reload|repr|round|setattr|sorted|\n                sum|unichr|vars|zip\n\t\t\t)\\b",
            "name": "support.function.builtin.python"
        },
        "generic_names": {
            "match": "[A-Za-z_][A-Za-z0-9_]*"
        },
        "strings": {
            "patterns": [
                {
                    "include": "#string_quoted_double"
                },
                {
                    "include": "#string_quoted_single"
                }
            ]
        },
        "string_quoted_single": {
            "patterns": [
                {
                    "match": "(?<!')(')(('))(?!')",
                    "name": "string.quoted.single.single-line.python",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.python"
                        },
                        "3": {
                            "name": "meta.empty-string.single.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.end.python"
                        }
                    }
                },
                {
                    "comment": "single quoted unicode-raw string",
                    "end": "((?<=''')(')''|''')",
                    "begin": "([uU]r)(''')",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_unicode_char"
                        },
                        {
                            "include": "#escaped_char"
                        },
                        {
                            "include": "#regular_expressions"
                        }
                    ],
                    "name": "string.quoted.single.block.unicode-raw-regex.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "meta.empty-string.single.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "single quoted unicode-raw string",
                    "end": "((?<=''')(')''|''')",
                    "begin": "([uU]R)(''')",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_unicode_char"
                        },
                        {
                            "include": "#escaped_char"
                        }
                    ],
                    "name": "string.quoted.single.block.unicode-raw.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "meta.empty-string.single.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "single quoted raw string",
                    "end": "((?<=''')(')''|''')",
                    "begin": "(r)(''')",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_char"
                        },
                        {
                            "include": "#regular_expressions"
                        }
                    ],
                    "name": "string.quoted.single.block.raw-regex.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "meta.empty-string.single.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "single quoted raw string",
                    "end": "((?<=''')(')''|''')",
                    "begin": "(R)(''')",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_char"
                        }
                    ],
                    "name": "string.quoted.single.block.raw.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "meta.empty-string.single.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "single quoted unicode string",
                    "end": "((?<=''')(')''|''')",
                    "begin": "([uU])(''')",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_unicode_char"
                        },
                        {
                            "include": "#escaped_char"
                        }
                    ],
                    "name": "string.quoted.single.block.unicode.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "meta.empty-string.single.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "single quoted raw string",
                    "end": "(')|(\\n)",
                    "begin": "([uU]r)(')",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_unicode_char"
                        },
                        {
                            "include": "#escaped_char"
                        },
                        {
                            "include": "#regular_expressions"
                        }
                    ],
                    "name": "string.quoted.single.single-line.unicode-raw-regex.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "invalid.illegal.unclosed-string.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "single quoted raw string",
                    "end": "(')|(\\n)",
                    "begin": "([uU]R)(')",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_unicode_char"
                        },
                        {
                            "include": "#escaped_char"
                        }
                    ],
                    "name": "string.quoted.single.single-line.unicode-raw.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "invalid.illegal.unclosed-string.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "single quoted raw string",
                    "end": "(')|(\\n)",
                    "begin": "(r)(')",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_char"
                        },
                        {
                            "include": "#regular_expressions"
                        }
                    ],
                    "name": "string.quoted.single.single-line.raw-regex.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "invalid.illegal.unclosed-string.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "single quoted raw string",
                    "end": "(')|(\\n)",
                    "begin": "(R)(')",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_char"
                        }
                    ],
                    "name": "string.quoted.single.single-line.raw.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "invalid.illegal.unclosed-string.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "single quoted unicode string",
                    "end": "(')|(\\n)",
                    "begin": "([uU])(')",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_unicode_char"
                        },
                        {
                            "include": "#escaped_char"
                        }
                    ],
                    "name": "string.quoted.single.single-line.unicode.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "invalid.illegal.unclosed-string.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.string.python"
                        },
                        "2": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "single quoted string",
                    "end": "((?<=''')(')''|''')",
                    "begin": "(''')(?=\\s*(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER))",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_char"
                        },
                        {
                            "include": "source.sql"
                        }
                    ],
                    "name": "string.quoted.single.block.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "meta.empty-string.single.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "single quoted string",
                    "end": "(')|(\\n)",
                    "begin": "(')(?=\\s*(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER))",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_char"
                        },
                        {
                            "include": "source.sql"
                        }
                    ],
                    "name": "string.quoted.single.single-line.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "invalid.illegal.unclosed-string.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "single quoted string",
                    "end": "((?<=''')(')''|''')",
                    "begin": "(''')",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_char"
                        }
                    ],
                    "name": "string.quoted.single.block.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "meta.empty-string.single.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                },
                {
                    "comment": "single quoted string",
                    "end": "(')|(\\n)",
                    "begin": "(')",
                    "patterns": [
                        {
                            "include": "#constant_placeholder"
                        },
                        {
                            "include": "#escaped_char"
                        }
                    ],
                    "name": "string.quoted.single.single-line.python",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.python"
                        },
                        "2": {
                            "name": "invalid.illegal.unclosed-string.python"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.python"
                        }
                    }
                }
            ]
        },
        "illegal_names": {
            "match": "\\b(and|as|assert|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|not|or|pass|print|raise|return|try|while|with|yield)\\b",
            "name": "invalid.illegal.name.python"
        },
        "entity_name_class": {
            "patterns": [
                {
                    "include": "#illegal_names"
                },
                {
                    "include": "#generic_names"
                }
            ]
        }
    }
}